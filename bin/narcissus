#!/usr/bin/env narwhal

// Narcissus JavaScript interpreter

var args = require("args"),
    file = require('file'),
    json = require('json'),
    os = require('os');

var narcissus = require('narcissus');

var parser = new args.Parser();

parser.usage('<file>')

parser.help(
    'Narcissus JavaScript interpreter\n' +
    '\n'
    );

parser.option("-s", "--sexpr", "sexpr")
    .help("Print parse tree in sexpr format")
    .set(true);

parser.option("-j", "--json", "json")
    .help("Print parse tree in JSON format")
    .set(true);

// A Perl convention
parser.option("-e", "--expression", "expression")
    .help("Inline JavaScript code")
    .set();

// TODO: Write a real main() function
// narcissus.main(system.args);

// For now, just print the parse tree of the file specified by the first
// argument


exports.main = function main(args) {
  var flags = parser.parse(args);

  var js;
  if (flags.expression) {
    js = flags.expression;
  } else if (flags.args[0]) {
    js = file.open(flags.args[0]).read();
  } else {
    parser.printHelp();
    os.exit();
  }

  print("PARSE TREE");

  var parseTree = narcissus.parse(js);
  if (flags.sexpr) {
    print(narcissus.sexpr(parseTree));
  } else if (flags.json) {
    var names = [
        'type', 'value',
        'varDecls', 'funDecls',
        'initializer',
        'body',
        'setup',
        'condition',
        'update',
        'isLoop',
        //'start', 'end',
        //'filename', 'lineno',
        'children'];
    //print(json.stringify(parseTree, names, 2));

    print(json.stringify(parseTree, null, 2));
  } else {
    print(parseTree.toString());
  }
}

if (require.main == module.id) {
  exports.main(system.args);
}
